<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://maeul2.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://maeul2.github.io/" rel="alternate" type="text/html" /><updated>2025-02-09T16:08:34+09:00</updated><id>https://maeul2.github.io/feed.xml</id><title type="html">마을이네</title><subtitle>마을이 주인 블로그</subtitle><author><name>WSL2077</name></author><entry><title type="html">인스타그램에는 절망이 없다.</title><link href="https://maeul2.github.io/2025/02/%EC%9D%B8%EC%8A%A4%ED%83%80%EA%B7%B8%EB%9E%A8.html" rel="alternate" type="text/html" title="인스타그램에는 절망이 없다." /><published>2025-02-09T00:00:00+09:00</published><updated>2025-02-09T16:08:25+09:00</updated><id>https://maeul2.github.io/2025/02/%EC%9D%B8%EC%8A%A4%ED%83%80%EA%B7%B8%EB%9E%A8</id><content type="html" xml:base="https://maeul2.github.io/2025/02/%EC%9D%B8%EC%8A%A4%ED%83%80%EA%B7%B8%EB%9E%A8.html"><![CDATA[<p>약속 시간까지 시간이 남아서 알라딘 종로점을 둘러보던 도중 이 책을 발견했다.</p>

<p>제목이 꽤나 어그레시브해서 어디 무슨 내용인지 볼까? 하고 책을 집었다.</p>

<p>이 책을 읽기 매우 잘 한 것 같다. 오랜만에 두번 읽은 책이다.</p>

<p>이 책을 읽고나니 SNS를 끊은 것이 내 인생에서 참 잘한 결정인 것 같다.</p>

<p>(엄밀히 말하자면 블로그도 SNS의 일종이니 다른 사람의 인생에 <strong>덜</strong> 신경 쓰기로 했다는 것이 정확한 워딩 같지만)</p>

<p>뭐 가끔 다른 사람들과 이야기 하다 보면 유행에 뒤쳐진다는 느낌을 받을 때도 있고 다른 사람들의 소식에 하~안~참 늦을 때도 있지만,</p>

<p>뭐 애초에 유행을 따르는 것에는 별로 관심이 없고, SNS로만 서로 소식을 알 수 있는거라면 그 정도 관계(사이)라는 거겠지.</p>

<p>책의 내용을 좀 말해보자면… 흠… 책을 읽어보시길…</p>

<p>여기선 이렇게 책을 권하지만 사실 실제 주변 사람들에게 권하기 조심스럽긴 하다. 뭐 각자 나름대로 SNS를 하는 이유가 있을테니.</p>

<p>(하지만 누군가 대체 넌 왜 SNS를 안 하니? 라고 물어본다면 이 책을 권해주겠다ㅎㅎ)</p>

<p>뭐랄까… 내가 SNS를 끊기로 마음먹으면서 한 생각을 누군가 잘 정리해서 책으로 옭겨놓은 느낌?</p>

<p>근데 뭐 책에서 SNS를 직접적으로 비판(?)하는 건 아니다.</p>

<p>뉴스에서 나오는 청년들이 겪는 어려움, 젠더 갈등 등의 원인이 청년들이 못 나서라기보다는 오히려 이 사회에 문제가 있는 것이라고 작가는 계속 말한다.</p>

<p>다만, SNS로 인해 이런 어려움과 문제들이 더욱 증폭되고 있는 것은 사실이라고 작가는 말하고 나 또한 그렇게 생각한다.</p>

<p>평소에 생각하던 것을 글로 읽고 글로 써보려니 더 잘 안 써지는 것 같다. 숨 쉬는 방법을 설명하기 어려운 것과 같은 느낌?</p>

<p>나는 운 좋게도 뉴스에 나오는 청년들이 겪는 어려움, 젠더 갈등 등을 아직 심각하게 겪어보진 못 한 것 같다.</p>

<p>아님 내가 무던해서 심각성을 크게 느끼지 못 한 것일 수도 있다. 그래도 이것 또한 축복이라고 생각한다.</p>

<p>SNS를 끊을 용기를 가진 나 자신과 이런 나를 낳아준 부모님께 감사하면서 이제 잠을 자야겠다…</p>

<p><a href="http://aladin.kr/p/hWgXh">인스타그램에는 절망이 없다</a></p>]]></content><author><name>WSL2077</name></author><category term="LIBRARY" /><category term="TODO" /><summary type="html"><![CDATA[약속 시간까지 시간이 남아서 알라딘 종로점을 둘러보던 도중 이 책을 발견했다.]]></summary></entry><entry><title type="html">템플릿 메소드 패턴을 사용한 콘텐츠 관리 서비스(CMS)</title><link href="https://maeul2.github.io/2025/01/%EC%BD%98%ED%85%90%EC%B8%A0_%ED%85%9C%ED%94%8C%EB%A6%BF_%EB%A9%94%EC%86%8C%EB%93%9C_%ED%8C%A8%ED%84%B4.html" rel="alternate" type="text/html" title="템플릿 메소드 패턴을 사용한 콘텐츠 관리 서비스(CMS)" /><published>2025-01-27T00:00:00+09:00</published><updated>2025-02-02T14:04:13+09:00</updated><id>https://maeul2.github.io/2025/01/%EC%BD%98%ED%85%90%EC%B8%A0_%ED%85%9C%ED%94%8C%EB%A6%BF_%EB%A9%94%EC%86%8C%EB%93%9C_%ED%8C%A8%ED%84%B4</id><content type="html" xml:base="https://maeul2.github.io/2025/01/%EC%BD%98%ED%85%90%EC%B8%A0_%ED%85%9C%ED%94%8C%EB%A6%BF_%EB%A9%94%EC%86%8C%EB%93%9C_%ED%8C%A8%ED%84%B4.html"><![CDATA[<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">ContentManageService</span><span class="o">&lt;</span><span class="no">T</span> <span class="kd">extends</span> <span class="nc">Content</span><span class="o">,</span> <span class="no">C</span> <span class="kd">extends</span> <span class="nc">Command</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="c1">//템플릿 메소드 패턴</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="nc">ContentDTO</span> <span class="nf">manage</span><span class="o">(</span><span class="no">C</span> <span class="n">cmd</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Assert</span><span class="o">.</span><span class="na">notNull</span><span class="o">(</span><span class="n">cmd</span><span class="o">,</span> <span class="s">"command must not be null"</span><span class="o">);</span>

        <span class="c1">//불러오기</span>
        <span class="no">T</span> <span class="n">content</span> <span class="o">=</span> <span class="n">load</span><span class="o">(</span><span class="n">cmd</span><span class="o">);</span>

        <span class="c1">//락</span>
        <span class="n">lock</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>

        <span class="c1">//이벤트 핸들러</span>
        <span class="no">T</span> <span class="n">handler</span> <span class="o">=</span> <span class="n">handler</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>

        <span class="c1">//이벤트 기반 작업</span>
        <span class="n">action</span><span class="o">(</span><span class="n">handler</span><span class="o">,</span> <span class="n">cmd</span><span class="o">);</span>

        <span class="c1">//상태 설정</span>
        <span class="n">status</span><span class="o">(</span><span class="n">handler</span><span class="o">);</span>

        <span class="c1">//이벤트 처리</span>
        <span class="n">process</span><span class="o">(</span><span class="n">handler</span><span class="o">);</span>

        <span class="c1">//데스킹 완료 시</span>
        <span class="k">if</span> <span class="o">(</span><span class="nc">Content</span><span class="o">.</span><span class="na">Status</span><span class="o">.</span><span class="na">DESK_DONE</span> <span class="o">==</span> <span class="n">content</span><span class="o">.</span><span class="na">getStatus</span><span class="o">())</span> <span class="o">{</span>
            <span class="c1">//배부</span>
            <span class="n">distribute</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>

            <span class="c1">//인덱싱</span>
            <span class="n">index</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">//저장</span>
        <span class="n">content</span> <span class="o">=</span> <span class="n">store</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>   <span class="c1">//Call by Value of the Reference???</span>

        <span class="c1">//락 해제</span>
        <span class="n">unLock</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>

        <span class="k">return</span> <span class="k">new</span> <span class="nf">ContentDTO</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">protected</span> <span class="kd">abstract</span> <span class="no">T</span> <span class="nf">load</span><span class="o">(</span><span class="no">C</span> <span class="n">cmd</span><span class="o">);</span>

    <span class="kd">protected</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">lock</span><span class="o">(</span><span class="no">T</span> <span class="n">content</span><span class="o">);</span>

    <span class="kd">protected</span> <span class="kd">abstract</span> <span class="no">T</span> <span class="nf">handler</span><span class="o">(</span><span class="no">T</span> <span class="n">content</span><span class="o">);</span>

    <span class="kd">protected</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">action</span><span class="o">(</span><span class="no">T</span> <span class="n">content</span><span class="o">,</span> <span class="no">C</span> <span class="n">cmd</span><span class="o">);</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">status</span><span class="o">(</span><span class="no">T</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">content</span><span class="o">.</span><span class="na">setStatus</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">protected</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="no">T</span> <span class="n">content</span><span class="o">);</span>

    <span class="kd">protected</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">distribute</span><span class="o">(</span><span class="no">T</span> <span class="n">content</span><span class="o">);</span>

    <span class="kd">protected</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">index</span><span class="o">(</span><span class="no">T</span> <span class="n">content</span><span class="o">);</span>

    <span class="kd">protected</span> <span class="kd">abstract</span> <span class="no">T</span> <span class="nf">store</span><span class="o">(</span><span class="no">T</span> <span class="n">input</span><span class="o">);</span>

    <span class="kd">protected</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">unLock</span><span class="o">(</span><span class="no">T</span> <span class="n">content</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>기본적으로 템플릿 메소드 패턴이고, ContentDTO타입 객체를 반환하는 팩토리 메소드 패턴이라고도 할 수 있겠다.</p>]]></content><author><name>WSL2077</name></author><category term="DEV" /><category term="Design Pattern" /><category term="Template Method Pattern" /><category term="TODO" /><summary type="html"><![CDATA[작성중...]]></summary></entry><entry><title type="html">이벤트 소싱을 어떻게 구현 할 것인가?</title><link href="https://maeul2.github.io/2025/01/%EC%9D%B4%EB%B2%A4%ED%8A%B8_%EC%86%8C%EC%8B%B1.html" rel="alternate" type="text/html" title="이벤트 소싱을 어떻게 구현 할 것인가?" /><published>2025-01-19T00:00:00+09:00</published><updated>2025-01-28T01:16:01+09:00</updated><id>https://maeul2.github.io/2025/01/%EC%9D%B4%EB%B2%A4%ED%8A%B8_%EC%86%8C%EC%8B%B1</id><content type="html" xml:base="https://maeul2.github.io/2025/01/%EC%9D%B4%EB%B2%A4%ED%8A%B8_%EC%86%8C%EC%8B%B1.html"><![CDATA[<p>긴 고민 끝에 이력 관리를 위한 이벤트 소싱을 구현하여 기록을 남긴다.</p>

<p>단순히 참고자료 <a href="https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=342975885" target="_blank">이벤트 소싱과 마이크로서비스 아키텍처</a>를 따라 했다면 금방 끝날 일이었지만,</p>

<p>몇 가지 원칙을 최대한 지켜보고자 노력하느라 시간이 오래 걸렸다. 진짜 잘 지킨건지는 모르겠지만ㅎ</p>

<ul>
  <li>단일 책임 원칙(Single Responsibility Principle)
    <ul>
      <li>하나의 클래스는 하나의 책임만 가진다.</li>
    </ul>
  </li>
  <li>개방-폐쇄 원칙(Open-Closed Principle)
    <ul>
      <li>변경에는 닫혀 있고, 확장에는 열려 있다.</li>
    </ul>
  </li>
</ul>

<p>우선 결과부터 보자</p>

<p><img src="https://drive.google.com/thumbnail?id=1FEbKYmgPgtgiWBHEk8994SO-RBsJaFtV&amp;sz=w1000" alt="클래스 다이어그램" /></p>

<p>Content타입은 콘텐츠 관리 시스템(CMS)에서 핵심 애그리게이터인 콘텐츠 자체이다. Article타입은 ‘기사’ 콘텐츠를 의미한다.</p>

<p>콘텐츠에는 생성과 수정, 감사 등 핵심 도메인 기능이 존재하고, 어플리케이션 계층까지 구현된 상태였다.</p>

<ul>
  <li>생성
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Builder</span>
<span class="kd">private</span> <span class="nf">Article</span><span class="o">(</span>
        <span class="nc">Content</span><span class="o">.</span><span class="na">ID</span> <span class="n">contentId</span><span class="o">,</span>
        <span class="nc">User</span> <span class="n">registerer</span><span class="o">,</span>
        <span class="nc">ContentType</span> <span class="n">contentType</span><span class="o">,</span>
        <span class="nc">DetailAttribute</span> <span class="n">detailAttribute</span>
<span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">(</span>
            <span class="n">contentId</span><span class="o">,</span>
            <span class="nc">Attribute</span><span class="o">.</span><span class="na">A</span><span class="o">,</span>
            <span class="n">registerer</span>
    <span class="o">);</span>

    <span class="nc">Assert</span><span class="o">.</span><span class="na">notNull</span><span class="o">(</span><span class="n">contentType</span><span class="o">,</span> <span class="s">"콘텐츠 타입이 null일 수 없습니다."</span><span class="o">);</span>
    <span class="nc">Assert</span><span class="o">.</span><span class="na">notNull</span><span class="o">(</span><span class="n">detailAttribute</span><span class="o">,</span> <span class="s">"상세 속성이 null일 수 없습니다."</span><span class="o">);</span>

    <span class="k">this</span><span class="o">.</span><span class="na">contentType</span> <span class="o">=</span> <span class="n">contentType</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">detailAttribute</span> <span class="o">=</span> <span class="n">detailAttribute</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div>    </div>
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">protected</span> <span class="nc">Article</span> <span class="nf">load</span><span class="o">(</span><span class="nc">CreateArticle</span> <span class="n">cmd</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="n">drafter</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">userInfoService</span><span class="o">.</span><span class="na">findUserById</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">getRegistererId</span><span class="o">())</span>
            <span class="o">.</span><span class="na">orElseThrow</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">UserNotFoundException</span><span class="o">(</span><span class="s">"User not found - "</span> <span class="o">+</span> <span class="n">cmd</span><span class="o">.</span><span class="na">getRegistererId</span><span class="o">()));</span>

    <span class="nc">Article</span><span class="o">.</span><span class="na">ContentType</span> <span class="n">contentType</span> <span class="o">=</span> <span class="nc">Article</span><span class="o">.</span><span class="na">ContentType</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">getContentType</span><span class="o">());</span>
    <span class="nc">Content</span><span class="o">.</span><span class="na">ID</span> <span class="n">contentId</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">contentIdFactory</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="nc">Content</span><span class="o">.</span><span class="na">Attribute</span><span class="o">.</span><span class="na">A</span><span class="o">,</span> <span class="n">contentType</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Department</span><span class="o">(</span><span class="n">drafter</span><span class="o">.</span><span class="na">getDeptId</span><span class="o">(),</span> <span class="n">drafter</span><span class="o">.</span><span class="na">getDeptName</span><span class="o">()));</span>

    <span class="k">this</span><span class="o">.</span><span class="na">articleRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">contentId</span><span class="o">)</span>
            <span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="n">article</span> <span class="o">-&gt;</span> <span class="o">{</span><span class="k">throw</span> <span class="k">new</span> <span class="nc">DuplicatedContentIdException</span><span class="o">(</span><span class="s">"이미 존재하는 콘텐츠 아이디 - "</span> <span class="o">+</span> <span class="n">contentId</span><span class="o">.</span><span class="na">getValue</span><span class="o">());});</span>

    <span class="k">return</span> <span class="nc">Article</span><span class="o">.</span><span class="na">draft</span><span class="o">()</span>
            <span class="o">.</span><span class="na">contentId</span><span class="o">(</span><span class="n">contentId</span><span class="o">)</span>
            <span class="o">.</span><span class="na">contentType</span><span class="o">(</span><span class="n">contentType</span><span class="o">)</span>
            <span class="o">.</span><span class="na">detailAttribute</span><span class="o">(</span><span class="nc">Article</span><span class="o">.</span><span class="na">DetailAttribute</span><span class="o">.</span><span class="na">fromCode</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">getDetailAttribute</span><span class="o">()))</span>
            <span class="o">.</span><span class="na">registerer</span><span class="o">(</span><span class="n">drafter</span><span class="o">)</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>수정
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">modify</span><span class="o">(</span><span class="nc">ArticleContent</span> <span class="n">articleContent</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Assert</span><span class="o">.</span><span class="na">notNull</span><span class="o">(</span><span class="n">articleContent</span><span class="o">,</span> <span class="s">"articleContent must not be null."</span><span class="o">);</span>

    <span class="k">this</span><span class="o">.</span><span class="na">articleContent</span> <span class="o">=</span> <span class="n">articleContent</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div>    </div>
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">action</span><span class="o">(</span><span class="nc">Article</span> <span class="n">article</span><span class="o">,</span> <span class="nc">ModifyArticle</span> <span class="n">cmd</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">article</span><span class="o">.</span><span class="na">getWriter</span><span class="o">()</span>   <span class="c1">//작성 이력이 있으면 작성자 계속 유지</span>
            <span class="o">.</span><span class="na">orElseGet</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>  <span class="c1">//작성 이력이 없고</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">isDraft</span><span class="o">())</span> <span class="o">{</span>    <span class="c1">//임시 저장이면</span>
                    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>    <span class="c1">//작성자 미지정</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>    <span class="c1">//첫 작성 완료 시</span>
                    <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">userInfoService</span><span class="o">.</span><span class="na">findUserById</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">getModifierId</span><span class="o">())</span>
                            <span class="o">.</span><span class="na">orElseThrow</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">UserNotFoundException</span><span class="o">(</span><span class="s">"Not Found User - "</span> <span class="o">+</span> <span class="n">cmd</span><span class="o">.</span><span class="na">getModifierId</span><span class="o">()));</span>
                <span class="o">}</span>
            <span class="o">});</span>

    <span class="n">article</span><span class="o">.</span><span class="na">modify</span><span class="o">(</span>
            <span class="nc">ArticleContent</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">title</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">getTitle</span><span class="o">())</span>
                    <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">getBody</span><span class="o">())</span>
                    <span class="o">.</span><span class="na">source</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">getSource</span><span class="o">())</span>
                    <span class="o">.</span><span class="na">writer</span><span class="o">(</span><span class="n">writer</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">temp</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">isTemp</span><span class="o">())</span>
                    <span class="o">.</span><span class="na">build</span><span class="o">()</span>
    <span class="o">);</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>이벤트 소싱 구현을 위해서는 다음과 같은 핵심 도메인 기능이 구현되어야 한다.</p>

<ul>
  <li>애그리게이트의 핵심 도메인 기능이 수행 될 때 그 결과로 발생한 이벤트들을 보관</li>
  <li>저장된 이벤트들을 재수화 하여 애그리게이트 상태 복원</li>
</ul>

<p>이벤트 소싱을 구현하기 앞서 드는 생각.</p>

<ul>
  <li>Content와 Article의 도메인 기능에 이벤트 소싱 기능을 추가하기 위해 코드를 고쳐야 하나(새로운 코드를 끼워 넣어야 하나)?
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">modify</span><span class="o">(</span><span class="nc">ArticleContent</span> <span class="n">articleContent</span><span class="o">)</span> <span class="o">{</span>
  <span class="nc">Assert</span><span class="o">.</span><span class="na">notNull</span><span class="o">(</span><span class="n">articleContent</span><span class="o">,</span> <span class="s">"articleContent must not be null."</span><span class="o">);</span>

  <span class="k">this</span><span class="o">.</span><span class="na">articleContent</span> <span class="o">=</span> <span class="n">articleContent</span><span class="o">;</span>

  <span class="c1">//수정 이벤트 생성</span>
  <span class="c1">//수정 이벤트 저장</span>
<span class="o">}</span>

<span class="c1">//이벤트 핸들링</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">apply</span><span class="o">(</span><span class="nc">ArticleModified</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">//이벤트 수행</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>애그리게이트를 수정하지 않는다면 어플리케이션 서비스에서 이벤트를 생성하고 보관을 해야 하나(결국 코드를 수정해야 하나)?
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">action</span><span class="o">(</span><span class="nc">Article</span> <span class="n">article</span><span class="o">,</span> <span class="nc">ModifyArticle</span> <span class="n">cmd</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">...</span>

    <span class="n">article</span><span class="o">.</span><span class="na">modify</span><span class="o">(</span>
        <span class="nc">ArticleContent</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">title</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">getTitle</span><span class="o">())</span>
                <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">getBody</span><span class="o">())</span>
                <span class="o">.</span><span class="na">source</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">getSource</span><span class="o">())</span>
                <span class="o">.</span><span class="na">writer</span><span class="o">(</span><span class="n">writer</span><span class="o">)</span>
                <span class="o">.</span><span class="na">isDraft</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">isDraft</span><span class="o">())</span>
                <span class="o">.</span><span class="na">build</span><span class="o">()</span>
    <span class="o">);</span>

    <span class="c1">//수정 이벤트 생성</span>
    <span class="c1">//수정 이벤트 저장</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>두 방안 모두</p>

<ul>
  <li>단일 책임 원칙
    <ul>
      <li>Content와 Article클래스에 이벤트 소싱 기능 코드를 추가하는게 맞나? 이 클래스들에는 콘텐츠 관련(생성, 수정, 감사 등) 도메인 기능만 들어가는게 맞지 않나?</li>
      <li>콘텐츠 생성과 수정을 담당하는 어플리케이션 계층 코드에 이벤트 소싱 기능 구현 코드를 추가하는게 맞나?</li>
    </ul>
  </li>
  <li>개방 폐쇄 원칙
    <ul>
      <li>기능을 추가 할 때마다 클래스의 코드를 수정해야 하는가?</li>
    </ul>
  </li>
</ul>

<p>원칙에 어긋나는 것으로 보였다.</p>

<p>어떻게 하면 위 두 원칙을 지키며 이벤트 소싱을 구현할까 이리저리 머리를 굴리다가…</p>

<p><strong>데코레이터 패턴</strong>을 사용해 보기로 하였다.</p>

<p>우선, 이벤트 소싱의 핵심 기능을 구현한 추상 클래스를 만들었다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">EventHandler</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Event</span><span class="o">&gt;</span> <span class="n">events</span><span class="o">;</span>

    <span class="kd">protected</span> <span class="nf">EventHandler</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">events</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">apply</span><span class="o">(</span><span class="nc">Event</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">apply</span><span class="o">(</span><span class="n">event</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">apply</span><span class="o">(</span><span class="nc">Event</span> <span class="n">event</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isNew</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Assert</span><span class="o">.</span><span class="na">notNull</span><span class="o">(</span><span class="n">event</span><span class="o">,</span> <span class="s">"event must not be null"</span><span class="o">);</span>

        <span class="nc">Method</span> <span class="n">handler</span><span class="o">;</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="n">handler</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getDeclaredMethod</span><span class="o">(</span><span class="s">"handle"</span><span class="o">,</span> <span class="n">event</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">NoSuchMethodException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="n">handler</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">event</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IllegalAccessException</span> <span class="o">|</span> <span class="nc">InvocationTargetException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">EventHandlingException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">isNew</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">events</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Event</span><span class="o">&gt;</span> <span class="nf">getEventList</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">unmodifiableList</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">events</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@NoArgsConstructor</span><span class="o">(</span><span class="n">access</span> <span class="o">=</span> <span class="nc">AccessLevel</span><span class="o">.</span><span class="na">PROTECTED</span><span class="o">,</span> <span class="n">force</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
<span class="nd">@MappedSuperclass</span>
<span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Content</span> <span class="kd">extends</span> <span class="nc">EventHandler</span> <span class="o">{</span>
    <span class="nd">@EmbeddedId</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="no">ID</span> <span class="n">id</span><span class="o">;</span>

    <span class="nd">@Enumerated</span><span class="o">(</span><span class="nc">EnumType</span><span class="o">.</span><span class="na">STRING</span><span class="o">)</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"CONTENT_ATTRIBUTE"</span><span class="o">,</span> <span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Attribute</span> <span class="n">contentAttribute</span><span class="o">;</span>

    <span class="nd">@Convert</span><span class="o">(</span><span class="n">converter</span> <span class="o">=</span> <span class="nc">Status</span><span class="o">.</span><span class="na">Converter</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"CMS_STATUS"</span><span class="o">,</span> <span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Status</span> <span class="n">status</span><span class="o">;</span>

    <span class="nd">@Embedded</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Registerer</span> <span class="n">registerer</span><span class="o">;</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"REGISTER_DATETIME"</span><span class="o">,</span> <span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">OffsetDateTime</span> <span class="n">registerDateTime</span><span class="o">;</span>

    <span class="nd">@Embedded</span>
    <span class="kd">private</span> <span class="nc">Updater</span> <span class="n">updater</span><span class="o">;</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"UPDATE_DATETIME"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">OffsetDateTime</span> <span class="n">updateDateTime</span><span class="o">;</span>

    <span class="nd">@Embedded</span>
    <span class="kd">private</span> <span class="nc">Desk</span> <span class="n">desk</span><span class="o">;</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"DESK_DATETIME"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">OffsetDateTime</span> <span class="n">deskDateTime</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"DIST_DATETIME"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">OffsetDateTime</span> <span class="n">distDateTime</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"DELETE_YN"</span><span class="o">,</span> <span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Boolean</span> <span class="n">deleted</span><span class="o">;</span>

    <span class="nd">@Version</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">version</span><span class="o">;</span>

    <span class="kd">protected</span> <span class="nf">Content</span><span class="o">(</span>
            <span class="no">ID</span> <span class="n">contentsId</span><span class="o">,</span>
            <span class="nc">Attribute</span> <span class="n">contentAttribute</span><span class="o">,</span>
            <span class="nc">User</span> <span class="n">registerer</span><span class="o">,</span>
            <span class="nc">OffsetDateTime</span> <span class="n">registerDateTime</span>
    <span class="o">)</span> <span class="o">{</span>
        <span class="nc">Assert</span><span class="o">.</span><span class="na">notNull</span><span class="o">(</span><span class="n">contentsId</span><span class="o">,</span> <span class="s">"콘텐츠 아이디가 null일 수 없습니다."</span><span class="o">);</span>
        <span class="nc">Assert</span><span class="o">.</span><span class="na">notNull</span><span class="o">(</span><span class="n">contentAttribute</span><span class="o">,</span> <span class="s">"콘텐츠 속성이 null일 수 없습니다."</span><span class="o">);</span>
        <span class="nc">Assert</span><span class="o">.</span><span class="na">notNull</span><span class="o">(</span><span class="n">registerer</span><span class="o">,</span> <span class="s">"등록자가 null일 수 없습니다."</span><span class="o">);</span>
        <span class="nc">Assert</span><span class="o">.</span><span class="na">notNull</span><span class="o">(</span><span class="n">registerDateTime</span><span class="o">,</span> <span class="s">"등록 일시가 null일 수 없습니다."</span><span class="o">);</span>

        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">contentsId</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">contentAttribute</span> <span class="o">=</span> <span class="n">contentAttribute</span><span class="o">;</span>

        <span class="k">this</span><span class="o">.</span><span class="na">registerer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Registerer</span><span class="o">(</span><span class="n">registerer</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">registerer</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="k">new</span> <span class="nc">Department</span><span class="o">(</span><span class="n">registerer</span><span class="o">.</span><span class="na">getDeptId</span><span class="o">(),</span> <span class="n">registerer</span><span class="o">.</span><span class="na">getDeptName</span><span class="o">()),</span> <span class="n">registerer</span><span class="o">.</span><span class="na">isDesk</span><span class="o">());</span>
        <span class="k">this</span><span class="o">.</span><span class="na">registerDateTime</span> <span class="o">=</span> <span class="n">registerDateTime</span><span class="o">;</span>

        <span class="k">this</span><span class="o">.</span><span class="na">deleted</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">audit</span><span class="o">(</span><span class="nc">User</span> <span class="n">updater</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Assert</span><span class="o">.</span><span class="na">notNull</span><span class="o">(</span><span class="n">updater</span><span class="o">,</span> <span class="s">"수정자가 null일 수 없습니다."</span><span class="o">);</span>

        <span class="k">this</span><span class="o">.</span><span class="na">updater</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Updater</span><span class="o">(</span>
                <span class="n">updater</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">updater</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span>
                <span class="k">new</span> <span class="nf">Department</span><span class="o">(</span><span class="n">updater</span><span class="o">.</span><span class="na">getDeptId</span><span class="o">(),</span> <span class="n">updater</span><span class="o">.</span><span class="na">getDeptName</span><span class="o">()),</span>
                <span class="n">updater</span><span class="o">.</span><span class="na">isDesk</span><span class="o">()</span>
        <span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">updateDateTime</span> <span class="o">=</span> <span class="nc">OffsetDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">updater</span><span class="o">.</span><span class="na">isDesk</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">desk</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Desk</span><span class="o">(</span>
                    <span class="n">updater</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">updater</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span>
                    <span class="k">new</span> <span class="nf">Department</span><span class="o">(</span><span class="n">updater</span><span class="o">.</span><span class="na">getDeptId</span><span class="o">(),</span> <span class="n">updater</span><span class="o">.</span><span class="na">getDeptName</span><span class="o">()),</span>
                    <span class="n">updater</span><span class="o">.</span><span class="na">isDesk</span><span class="o">()</span>
            <span class="o">);</span>
            <span class="k">this</span><span class="o">.</span><span class="na">deskDateTime</span> <span class="o">=</span> <span class="nc">OffsetDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">setStatus</span><span class="o">();</span>

    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">changeStatus</span><span class="o">(</span><span class="nc">Status</span> <span class="n">newStatus</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Assert</span><span class="o">.</span><span class="na">notNull</span><span class="o">(</span><span class="n">newStatus</span><span class="o">,</span> <span class="s">"status must not be null."</span><span class="o">);</span>

        <span class="k">this</span><span class="o">.</span><span class="na">status</span> <span class="o">=</span> <span class="n">newStatus</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">deleted</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">//접근자</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
<span class="o">}</span>
</code></pre></div></div>
<p>그리고 Content들에서 이벤트들이 발생하고 소비된다고 생각하여 Content타입이 EventHandler타입을 상속하게 하였다.</p>
<ul>
  <li>이 분이 좀 마음에 걸린다. 어쨋든 Content타입에 변화가 생겼고, Content의 도메인 기능과 무관한 메소드들이 Content타입을 통해 공개 되어 호출이 되면 오류가 발생할 여지가 생겼다. 이렇게 했을 때 단일 책임 원칙을 준수한다고 말할 수 있는 것인가..?</li>
</ul>

<p>EventHandler클래스의 기능을 EventHandler클래스를 상속하지 않고 Content클래스에서 구현 할 수 있지만, 이렇게 구현한 이유를 대자면…</p>

<ol>
  <li>Content클래스가 EventHandler클래스를 상속하도록 Content클래스를 수정 해도 기존 Content클래스를 사용하던 코드들에는 아무런 영향을 미치지 않는다(코드 수정 필요x).
    <ul>
      <li>콘텐츠 생성과 수정을 담당하는 어플리케이션 계층 코드들을 수정 할 필요없다.</li>
    </ul>
  </li>
  <li>이벤트 발생, 보관 기능과 콘텐츠의 도메인 기능을 분리. 이렇게 보면 단일 책임 원칙을 준수한다고 할 수 있는 것인가…?</li>
  <li>어차피 apply메소드는 이벤트 재수화 때문에 공개 된다.</li>
</ol>

<p>등이 있다(더 나은 방안이 있다면 피드백 적극 환영하는 바이다).</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArticleEventHandler</span> <span class="kd">extends</span> <span class="nc">Article</span> <span class="o">{</span>  <span class="c1">//데코레이터 패턴</span>
    <span class="kd">private</span> <span class="nc">Article</span> <span class="n">actor</span><span class="o">;</span>  <span class="c1">//위임</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Article</span> <span class="nf">handler</span><span class="o">(</span><span class="nc">Article</span> <span class="n">article</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Assert</span><span class="o">.</span><span class="na">notNull</span><span class="o">(</span><span class="n">article</span><span class="o">,</span> <span class="s">"Article must not be null"</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">article</span><span class="o">.</span><span class="na">isDraft</span><span class="o">())</span> <span class="o">{</span>    <span class="c1">//기사 초안이면</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">ArticleEventHandler</span><span class="o">(</span><span class="k">new</span> <span class="nc">ArticleCreated</span><span class="o">(</span><span class="n">article</span><span class="o">));</span>    <span class="c1">//기사 생성 이벤트 발생</span>
        <span class="o">}</span>

            <span class="k">return</span> <span class="k">new</span> <span class="nf">ArticleEventHandler</span><span class="o">(</span><span class="n">article</span><span class="o">);</span>    <span class="c1">//기사 초안이 아니면 바로 위임자 설정</span>
        <span class="o">}</span>

    <span class="kd">private</span> <span class="nf">ArticleEventHandler</span><span class="o">(</span><span class="nc">ArticleCreated</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Assert</span><span class="o">.</span><span class="na">notNull</span><span class="o">(</span><span class="n">event</span><span class="o">,</span> <span class="s">"ArticleCreated argument cannot be null"</span><span class="o">);</span>

        <span class="n">apply</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nf">ArticleEventHandler</span><span class="o">(</span><span class="nc">Article</span> <span class="n">actor</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Assert</span><span class="o">.</span><span class="na">notNull</span><span class="o">(</span><span class="n">actor</span><span class="o">,</span> <span class="s">"actor must not be null"</span><span class="o">);</span>

        <span class="k">this</span><span class="o">.</span><span class="na">actor</span> <span class="o">=</span> <span class="n">actor</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Article</span> <span class="nf">replayer</span><span class="o">()</span> <span class="o">{</span>  <span class="c1">//이벤트 재수화용 정적 팩토리 메소드</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ArticleEventHandler</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nf">ArticleEventHandler</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">actor</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="nc">ArticleCreated</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">actor</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getArticle</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">modify</span><span class="o">(</span><span class="nc">ArticleContent</span> <span class="n">articleContent</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">apply</span><span class="o">(</span><span class="k">new</span> <span class="nc">ArticleModified</span><span class="o">(</span><span class="n">articleContent</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="nc">ArticleModified</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">actor</span><span class="o">.</span><span class="na">modify</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getArticleContent</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">audit</span><span class="o">(</span><span class="nc">User</span> <span class="n">updater</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">apply</span><span class="o">(</span><span class="k">new</span> <span class="nc">ContentAudited</span><span class="o">(</span><span class="n">updater</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="nc">ContentAudited</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">actor</span><span class="o">.</span><span class="na">audit</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getUpdater</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setStatus</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">apply</span><span class="o">(</span><span class="k">new</span> <span class="nc">ContentStatusChanged</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="nc">ContentStatusChanged</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">actor</span><span class="o">.</span><span class="na">setStatus</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">apply</span><span class="o">(</span><span class="k">new</span> <span class="nc">ContentDeleted</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="nc">ContentDeleted</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">actor</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="c1">//아래는 접근자 위임</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
<span class="o">}</span>
</code></pre></div></div>

<ol>
  <li>정적 팩토리 메소드로 이벤트 핸들러 객체를 생성할 때 상황에 맞는 이벤트를 발생시킨다.</li>
  <li>기존 도메인 기능을 구현한 메소드들을 확장한다.
    <ol>
      <li>도메인 기능을 실행하는 대신 이벤트를 발생, 보관하고</li>
      <li>이벤트 객체를 받아서 도메인 기능 실행을 위임하는 handle메소드 구현</li>
    </ol>
  </li>
</ol>

<p>여기까지가 콘텐츠의 핵심 도메인 기능과 이벤트 소싱 기능을 분리하기 위해 머리를 짜낸 결과이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="nc">ContentDTO</span> <span class="nf">manage</span><span class="o">(</span><span class="no">C</span> <span class="n">cmd</span><span class="o">)</span> <span class="o">{</span>   <span class="c1">//템플릿 메소드 패턴</span>
    <span class="nc">Assert</span><span class="o">.</span><span class="na">notNull</span><span class="o">(</span><span class="n">cmd</span><span class="o">,</span> <span class="s">"command must not be null"</span><span class="o">);</span>

    <span class="no">T</span> <span class="n">content</span> <span class="o">=</span> <span class="n">load</span><span class="o">(</span><span class="n">cmd</span><span class="o">);</span>

    <span class="c1">//락</span>
    <span class="n">lock</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>

    <span class="c1">//이벤트 핸들러</span>
    <span class="no">T</span> <span class="n">handler</span> <span class="o">=</span> <span class="n">handler</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>

    <span class="c1">//이벤트 기반 작업</span>
    <span class="n">action</span><span class="o">(</span><span class="n">handler</span><span class="o">,</span> <span class="n">cmd</span><span class="o">);</span>

    <span class="c1">//상태 설정</span>
    <span class="n">status</span><span class="o">(</span><span class="n">handler</span><span class="o">);</span>

    <span class="c1">//저장</span>
    <span class="n">content</span> <span class="o">=</span> <span class="n">store</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>   <span class="c1">//Call by Value of the Reference???</span>

    <span class="c1">//이벤트 처리</span>
    <span class="n">process</span><span class="o">(</span><span class="n">handler</span><span class="o">);</span>

    <span class="c1">//데스킹 완료 시</span>
    <span class="k">if</span> <span class="o">(</span><span class="nc">Content</span><span class="o">.</span><span class="na">Status</span><span class="o">.</span><span class="na">DESK_DONE</span> <span class="o">==</span> <span class="n">content</span><span class="o">.</span><span class="na">getStatus</span><span class="o">())</span> <span class="o">{</span>
        <span class="c1">//배부</span>
        <span class="n">distribute</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>

        <span class="c1">//인덱싱</span>
        <span class="n">index</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">//락 해제</span>
    <span class="n">unLock</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>

    <span class="k">return</span> <span class="k">new</span> <span class="nf">ContentDTO</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>여기서 중요한 부분은 템플릿 메소드 manage의 handler메소드와 action메소드이다. 이 부분이 데코레이터 패턴을 차용함으로써 어떤 이득을 볼 수 있는지 보여주는 부분이다.</p>

<ul>
  <li><a href="https://maeul2.github.io/2025/01/%EC%BD%98%ED%85%90%EC%B8%A0_%ED%85%9C%ED%94%8C%EB%A6%BF_%EB%A9%94%EC%86%8C%EB%93%9C_%ED%8C%A8%ED%84%B4.html" target="_blank">템플릿 메소드 패턴이란?</a></li>
</ul>

<p>handler메소드에서 이벤트 핸들러 객체를 반환한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">protected</span> <span class="nc">Article</span> <span class="nf">handler</span><span class="o">(</span><span class="nc">Article</span> <span class="n">article</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nc">ArticleEventHandler</span><span class="o">.</span><span class="na">handler</span><span class="o">(</span><span class="n">article</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>반환 타입이 Article이므로 manage메소드의 다른 부분에서는 handler메소드에서 반환된 객체가 마치 Article타입인 것처럼 사용가능하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">action</span><span class="o">(</span><span class="nc">Article</span> <span class="n">article</span><span class="o">,</span> <span class="nc">ModifyArticle</span> <span class="n">cmd</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">article</span><span class="o">.</span><span class="na">getWriter</span><span class="o">()</span>   <span class="c1">//작성 이력이 있으면 작성자 계속 유지</span>
            <span class="o">.</span><span class="na">orElseGet</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>  <span class="c1">//작성 이력이 없고</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">isTemp</span><span class="o">())</span> <span class="o">{</span>    <span class="c1">//임시 저장이면</span>
                    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>    <span class="c1">//작성자 미지정</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>    <span class="c1">//첫 작성 완료 시</span>
                    <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">userInfoService</span><span class="o">.</span><span class="na">findUserById</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">getModifierId</span><span class="o">())</span>
                            <span class="o">.</span><span class="na">orElseThrow</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">UserNotFoundException</span><span class="o">(</span><span class="s">"Not Found User - "</span> <span class="o">+</span> <span class="n">cmd</span><span class="o">.</span><span class="na">getModifierId</span><span class="o">()));</span>
                <span class="o">}</span>
            <span class="o">});</span>

    <span class="n">article</span><span class="o">.</span><span class="na">modify</span><span class="o">(</span>
            <span class="nc">ArticleContent</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">title</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">getTitle</span><span class="o">())</span>
                    <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">getBody</span><span class="o">())</span>
                    <span class="o">.</span><span class="na">source</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">getSource</span><span class="o">())</span>
                    <span class="o">.</span><span class="na">writer</span><span class="o">(</span><span class="n">writer</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">temp</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">isTemp</span><span class="o">())</span>
                    <span class="o">.</span><span class="na">build</span><span class="o">()</span>
    <span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p><strong><em>이벤트 소싱 기능을 추가 했음에도 위 action메소드 코드가 변경되지 않았다! 변경에는 닫혀있지만 확장에는 열려있다!</em></strong></p>
<ul>
  <li>action메소드는 article파라미터로 넘어온 인자가 ArticleEventHandler타입임에도 이것을 모른채로 article파라미터가 Article타입 인 것처럼 article매게변수를 조작한다.</li>
</ul>

<p><a href="https://github.com/maeul2/cms-v2" target="_blank">소스 원본은 여기서!</a></p>]]></content><author><name>WSL2077</name></author><category term="DEV" /><category term="Design Pattern" /><category term="SRP" /><category term="OCP" /><category term="Decorator Pattern" /><summary type="html"><![CDATA[긴 고민 끝에 이력 관리를 위한 이벤트 소싱을 구현하여 기록을 남긴다.]]></summary></entry><entry><title type="html">마을이</title><link href="https://maeul2.github.io/2025/01/%EB%AD%90_%EB%AC%BC%EA%B3%A0%EC%9E%87%EB%83%90.html" rel="alternate" type="text/html" title="마을이" /><published>2025-01-19T00:00:00+09:00</published><updated>2025-01-19T23:37:36+09:00</updated><id>https://maeul2.github.io/2025/01/%EB%AD%90_%EB%AC%BC%EA%B3%A0%EC%9E%87%EB%83%90</id><content type="html" xml:base="https://maeul2.github.io/2025/01/%EB%AD%90_%EB%AC%BC%EA%B3%A0%EC%9E%87%EB%83%90.html"><![CDATA[<video src="https://github.com/user-attachments/assets/3ee973d4-8258-469e-8bf1-80b100af5428" controls="" width="50%" height="50%"></video>]]></content><author><name>WSL2077</name></author><category term="FEED" /><summary type="html"><![CDATA[어이 입에 물고 있는건 놓고 주무셔야죠]]></summary></entry><entry><title type="html">정의감 중독 사회</title><link href="https://maeul2.github.io/2025/01/%EC%A0%95%EC%9D%98%EA%B0%90_%EC%A4%91%EB%8F%85_%EC%82%AC%ED%9A%8C.html" rel="alternate" type="text/html" title="정의감 중독 사회" /><published>2025-01-14T00:00:00+09:00</published><updated>2025-01-15T23:16:48+09:00</updated><id>https://maeul2.github.io/2025/01/%EC%A0%95%EC%9D%98%EA%B0%90_%EC%A4%91%EB%8F%85_%EC%82%AC%ED%9A%8C</id><content type="html" xml:base="https://maeul2.github.io/2025/01/%EC%A0%95%EC%9D%98%EA%B0%90_%EC%A4%91%EB%8F%85_%EC%82%AC%ED%9A%8C.html"><![CDATA[<p>인문학 책에서 흔히 이야기하는 현대 사회의 사람들에게서 나타나는 문제들</p>

<ul>
  <li>남의 시선을 너무 의식하는 것</li>
  <li>자신에게 너무 엄격한 것
    <ul>
      <li>불가항력적인 사고나 실패를 자신의 탓으로 돌리고 절망하는 것(?)</li>
    </ul>
  </li>
  <li>불특정 다수에게 공격적인 것
    <ul>
      <li>특히 온라인에서</li>
    </ul>
  </li>
  <li>다른 사람들과 타협하지 않는 것
    <ul>
      <li>무조건 자신이 옳다고 여기는 것</li>
    </ul>
  </li>
</ul>

<p>의 원인이 정의감 과잉에서 비롯된 것이라는 관점이 흥미로웠다.</p>

<p>뭐 나머지는 다른 흔한 인문학 책들과 마찬가지로</p>

<p>위와 같은 현대 사회에서 사람들이 겪는 문제들을 어떻게 극복 할 수 있는지 제시하는 내용이다(정의감과 관련해서).</p>

<p><a href="http://aladin.kr/p/izHi9" target="_blank">정의감 중독 사회</a></p>]]></content><author><name>WSL2077</name></author><category term="LIBRARY" /><summary type="html"><![CDATA[인문학 책에서 흔히 이야기하는 현대 사회의 사람들에게서 나타나는 문제들]]></summary></entry><entry><title type="html">네이버 검색 노출</title><link href="https://maeul2.github.io/2025/01/%EB%84%A4%EC%9D%B4%EB%B2%84_%EA%B2%80%EC%83%89.html" rel="alternate" type="text/html" title="네이버 검색 노출" /><published>2025-01-07T00:00:00+09:00</published><updated>2025-01-07T00:52:10+09:00</updated><id>https://maeul2.github.io/2025/01/%EB%84%A4%EC%9D%B4%EB%B2%84_%EA%B2%80%EC%83%89</id><content type="html" xml:base="https://maeul2.github.io/2025/01/%EB%84%A4%EC%9D%B4%EB%B2%84_%EA%B2%80%EC%83%89.html"><![CDATA[<p>이제 보니 네이버 검색에서도 노출된다!</p>

<p>저~기 뒤에서</p>]]></content><author><name>WSL2077</name></author><category term="FEED" /><summary type="html"><![CDATA[이제 보니 네이버 검색에서도 노출된다!]]></summary></entry><entry><title type="html">노인과 바다</title><link href="https://maeul2.github.io/2025/01/%EB%85%B8%EC%9D%B8%EA%B3%BC_%EB%B0%94%EB%8B%A4.html" rel="alternate" type="text/html" title="노인과 바다" /><published>2025-01-02T00:00:00+09:00</published><updated>2025-01-15T23:16:48+09:00</updated><id>https://maeul2.github.io/2025/01/%EB%85%B8%EC%9D%B8%EA%B3%BC_%EB%B0%94%EB%8B%A4</id><content type="html" xml:base="https://maeul2.github.io/2025/01/%EB%85%B8%EC%9D%B8%EA%B3%BC_%EB%B0%94%EB%8B%A4.html"><![CDATA[<p>중요한 것은 꺾이지 않는 마음</p>

<p><a href="http://aladin.kr/p/ZFNIV" target="_blank">노인과 바다</a></p>]]></content><author><name>WSL2077</name></author><category term="LIBRARY" /><summary type="html"><![CDATA[중요한 것은 꺾이지 않는 마음]]></summary></entry><entry><title type="html">구글 검색 노출!</title><link href="https://maeul2.github.io/2024/12/%EA%B5%AC%EA%B8%80_%EA%B2%80%EC%83%89.html" rel="alternate" type="text/html" title="구글 검색 노출!" /><published>2024-12-31T00:00:00+09:00</published><updated>2024-12-31T05:55:57+09:00</updated><id>https://maeul2.github.io/2024/12/%EA%B5%AC%EA%B8%80_%EA%B2%80%EC%83%89</id><content type="html" xml:base="https://maeul2.github.io/2024/12/%EA%B5%AC%EA%B8%80_%EA%B2%80%EC%83%89.html"><![CDATA[<p>진짜 공개 블로그로서의 첫 발</p>

<p>네이버 검색 노출은 힘드네…하기야 자기들 서비스가 잇으니까 뭐</p>

<p>구글링 짱!</p>]]></content><author><name>WSL2077</name></author><category term="FEED" /><summary type="html"><![CDATA[진짜 공개 블로그로서의 첫 발]]></summary></entry><entry><title type="html">운전 면허 갱신</title><link href="https://maeul2.github.io/2024/12/%EC%9A%B4%EC%A0%84%EB%A9%B4%ED%97%88_%EA%B0%B1%EC%8B%A0.html" rel="alternate" type="text/html" title="운전 면허 갱신" /><published>2024-12-30T00:00:00+09:00</published><updated>2024-12-31T08:29:00+09:00</updated><id>https://maeul2.github.io/2024/12/%EC%9A%B4%EC%A0%84%EB%A9%B4%ED%97%88_%EA%B0%B1%EC%8B%A0</id><content type="html" xml:base="https://maeul2.github.io/2024/12/%EC%9A%B4%EC%A0%84%EB%A9%B4%ED%97%88_%EA%B0%B1%EC%8B%A0.html"><![CDATA[<p>나는 이제 10년 뒤의 일이지만ㅎ 그런데 10년 금방 가네ㄷㄷ</p>

<p>조만간 1종 보통 운전 면허 갱신해야 하는 분들은 건강검진 때</p>

<p>양 눈 각각 0.5이상으로 좋게 만들(?)어서 가시길.</p>

<p>요즘 운전면허</p>

<p><img src="https://drive.google.com/thumbnail?id=1sGLDYkqv33JfuLurGdPp098pabLb6chI&amp;sz=w1000" alt="요즘 운전 면허" width="50%" height="50%" /></p>

<p><sub>뒷면 입니다.</sub></p>]]></content><author><name>WSL2077</name></author><category term="FEED" /><summary type="html"><![CDATA[5시간 걸렸다...]]></summary></entry><entry><title type="html">개발 카테고리를 처음 만들며… 요즘 고민</title><link href="https://maeul2.github.io/2024/12/%EC%9D%B4%EB%A0%A5%EA%B4%80%EB%A6%AC_%EA%B3%A0%EB%AF%BC.html" rel="alternate" type="text/html" title="개발 카테고리를 처음 만들며… 요즘 고민" /><published>2024-12-27T00:00:00+09:00</published><updated>2025-01-19T23:36:36+09:00</updated><id>https://maeul2.github.io/2024/12/%EC%9D%B4%EB%A0%A5%EA%B4%80%EB%A6%AC_%EA%B3%A0%EB%AF%BC</id><content type="html" xml:base="https://maeul2.github.io/2024/12/%EC%9D%B4%EB%A0%A5%EA%B4%80%EB%A6%AC_%EA%B3%A0%EB%AF%BC.html"><![CDATA[<p>요즘 업무에서도 그렇고 개인 공부하면서도 그렇고</p>

<p>도메인에서 발생하는 이벤트들을 기록하는 기능을 어떻게 구현해야 할지 고민 중이다.</p>

<p>왜 하느냐? 하면…</p>

<ul>
  <li>이벤트 저장
    <ul>
      <li>사용자가 어떤 행위를 하였는지 추후 분석 할 수 있도록</li>
    </ul>
  </li>
  <li>이벤트 조회
    <ul>
      <li>저장 된 이벤트를 리플레이 하여 엔티티를 과거 상태로 복원</li>
    </ul>
  </li>
</ul>

<p>어플리케이션 계층 관점에서 보자면 <strong>이력 관리</strong> 기능이라고 할 수 있겠다.</p>

<p>우선 이벤트가 발생하는 도메인과 도메인 이벤트들을 저장하고 조회 하는 도메인(앞으로 이력 관리 도메인)으로 나누기로 하였다.</p>

<p>이벤트가 발생하는 도메인의 인프라 계층에서 도메인 이벤트 &lt;-&gt; 이력 관리 용 이벤트 변환을 하기로 한다.</p>

<p>큰 틀에서 바운디드 컨텍스트는 나눈 것 같은데…</p>

<p>여기서 가장 큰 고민이</p>

<ul>
  <li>도메인에서 발생한 이벤트들을 이력 관리 도메인에 넘겨주기 전까지 어디에 보관하고</li>
  <li>이벤트 처리 핸들러를 어디에 구현할 것인가</li>
</ul>

<p>이다.</p>

<p>계속…</p>

<p>거의 열흘 간의 장고 끝에 어느 정도 구현을 한 것 같다? 테스트 코드 짜보고 실증이 되면 정리글을 쓰도록 하겠다.</p>

<ul>
  <li>참고 자료
    <ul>
      <li><a href="https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=342975885" target="_blank">이벤트 소싱과 마이크로서비스 아키텍처</a></li>
    </ul>
  </li>
</ul>]]></content><author><name>WSL2077</name></author><category term="DEV" /><summary type="html"><![CDATA[요즘 업무에서도 그렇고 개인 공부하면서도 그렇고]]></summary></entry></feed>